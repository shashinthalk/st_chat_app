# Nginx configuration for api.shashinthalk.cc
# Flask Q&A API reverse proxy

# HTTP server block (redirects to HTTPS)
server {
    listen 80;
    server_name api.shashinthalk.cc;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl http2;
    server_name api.shashinthalk.cc;
    
    # SSL certificate paths (update these after getting SSL certificates)
    ssl_certificate /etc/letsencrypt/live/api.shashinthalk.cc/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.shashinthalk.cc/privkey.pem;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Rate limiting for API protection
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=30r/m;
    
    # Access and error logs
    access_log /var/log/nginx/api.shashinthalk.cc.access.log;
    error_log /var/log/nginx/api.shashinthalk.cc.error.log;
    
    # Root location - API information
    location = / {
        return 200 '{"message": "Flask Q&A API", "status": "online", "endpoints": ["/health", "/query"], "documentation": "https://github.com/your-repo"}';
        add_header Content-Type application/json;
    }
    
    # Health check endpoint (no rate limiting for monitoring)
    location /health {
        proxy_pass http://127.0.0.1:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # Health check optimized timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # Disable buffering for health checks
        proxy_buffering off;
        proxy_cache off;
    }
    
    # API query endpoint with rate limiting
    location /query {
        # Apply rate limiting
        limit_req zone=api_limit burst=10 nodelay;
        limit_req_status 429;
        
        proxy_pass http://127.0.0.1:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # API optimized timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Enable buffering for better performance
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # CORS headers (if needed)
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Custom error pages
    error_page 404 /404.json;
    location = /404.json {
        return 404 '{"error": "Endpoint not found", "message": "Available endpoints: /health, /query", "status_code": 404}';
        add_header Content-Type application/json;
    }
    
    error_page 429 /429.json;
    location = /429.json {
        return 429 '{"error": "Rate limit exceeded", "message": "Too many requests. Please try again later.", "status_code": 429}';
        add_header Content-Type application/json;
    }
    
    error_page 502 503 504 /50x.json;
    location = /50x.json {
        return 502 '{"error": "Service temporarily unavailable", "message": "The API service is currently down. Please try again later.", "status_code": 502}';
        add_header Content-Type application/json;
    }
} 