name: Deploy Flask Q&A API

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test Flask app creation
      run: |
        python -c "from app import create_app; app = create_app(); print('âœ… Flask app created successfully')"
        
    - name: Build Docker image
      run: |
        docker build -t flask-qa-api:latest .
        
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 5001:5001 flask-qa-api:latest
        sleep 10
        docker logs test-container
        docker stop test-container
        docker rm test-container
        
    - name: Save Docker image
      run: |
        docker save flask-qa-api:latest | gzip > flask-qa-api.tar.gz
        
    - name: Copy Docker image to server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "flask-qa-api.tar.gz"
        target: "/tmp/"
        
    - name: Deploy to server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 60s
        command_timeout: 5m
        script: |
          set -e
          echo "Starting deployment..."
          cd /tmp
          
          echo "Loading Docker image..."
          docker load < flask-qa-api.tar.gz
          
          echo "Stopping existing container..."
          docker stop flask-qa-container 2>/dev/null || echo "No existing container"
          docker rm flask-qa-container 2>/dev/null || echo "No existing container to remove"
          
          echo "Starting new container..."
          docker run -d \
            --name flask-qa-container \
            --restart unless-stopped \
            -p 5001:5001 \
            flask-qa-api:latest
          
          echo "Cleaning up..."
          rm -f flask-qa-api.tar.gz
          docker image prune -f
          
          echo "Deployment completed successfully!"
        
    - name: Cleanup local artifacts
      if: always()
      run: |
        rm -f flask-qa-api.tar.gz
        docker rmi flask-qa-api:latest 2>/dev/null || true 