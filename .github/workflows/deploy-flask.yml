name: Deploy Flask Sentence Transformer API

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t sentence-transformer-flask:latest .
        echo "Docker image built successfully"
        
    - name: Save Docker image to tarball
      run: |
        docker save sentence-transformer-flask:latest | gzip > sentence-transformer-flask.tar.gz
        ls -lh sentence-transformer-flask.tar.gz
        echo "Docker image saved to tarball"
        
    - name: Copy tarball to remote server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.USERNAME }}
        username: ${{ secrets.SERVER_IP }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "sentence-transformer-flask.tar.gz"
        target: "/tmp/"
        timeout: 300s
        
    - name: Deploy on remote server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 600s
        script: |
          set -e
          
          echo "Starting deployment process..."
          
          # Navigate to deployment directory
          cd /tmp
          
          # Load the Docker image
          echo "Loading Docker image..."
          docker load < sentence-transformer-flask.tar.gz
          
          # Stop and remove existing container if it exists
          echo "Stopping existing container..."
          docker stop st-flask-container 2>/dev/null || echo "No existing container to stop"
          docker rm st-flask-container 2>/dev/null || echo "No existing container to remove"
          
          # Prune unused Docker images to free up space
          echo "Pruning unused Docker images..."
          docker image prune -f
          
          # Run new container
          echo "Starting new container..."
          docker run -d \
            --name st-flask-container \
            --restart unless-stopped \
            -p 5001:5001 \
            sentence-transformer-flask:latest
            
          # Clean up tarball
          echo "Cleaning up deployment files..."
          rm -f sentence-transformer-flask.tar.gz
          
          # Wait for container to start
          echo "Waiting for container to start..."
          sleep 5
          
          # Check if container is running
          if ! docker ps | grep -q st-flask-container; then
            echo "ERROR: Container failed to start"
            docker logs st-flask-container
            exit 1
          fi
          
          echo "Container started successfully"
          
          # Wait a bit more for the Flask app to fully initialize
          echo "Waiting for Flask app to initialize..."
          sleep 10
          
          # Perform health check
          echo "Performing health check..."
          max_attempts=12
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f -s http://localhost:5001/health > /dev/null; then
              echo "Health check passed!"
              
              # Get and display health check response
              health_response=$(curl -s http://localhost:5001/health)
              echo "Health check response: $health_response"
              
              echo "Deployment completed successfully!"
              exit 0
            fi
            
            echo "Health check failed, waiting 5 seconds before retry..."
            sleep 5
            attempt=$((attempt + 1))
          done
          
          # If we get here, health check failed
          echo "ERROR: Health check failed after $max_attempts attempts"
          echo "Container logs:"
          docker logs st-flask-container
          echo "Container status:"
          docker ps -a | grep st-flask-container
          exit 1 