# Multi-stage build for minimal production image
FROM python:3.10-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    linux-headers \
    g++ \
    libffi-dev \
    openssl-dev \
    cargo \
    rust

# Set working directory
WORKDIR /app

# Copy and install Python dependencies with fallback
COPY requirements.txt requirements-fallback.txt ./
RUN pip install --no-cache-dir --user -r requirements.txt || \
    pip install --no-cache-dir --user -r requirements-fallback.txt

# Production stage with minimal footprint
FROM python:3.10-alpine AS production

# Install only runtime dependencies
RUN apk add --no-cache \
    libstdc++ \
    libgomp \
    curl

# Create non-root user
RUN adduser -D -s /bin/sh appuser

# Set working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /root/.local /home/appuser/.local

# Copy application code
COPY --chown=appuser:appuser app/ ./app/
COPY --chown=appuser:appuser run.py .
COPY --chown=appuser:appuser gunicorn.conf.py .

# Switch to non-root user
USER appuser

# Add local packages to PATH
ENV PATH=/home/appuser/.local/bin:$PATH
ENV PYTHONPATH=/home/appuser/.local/lib/python3.10/site-packages:$PYTHONPATH

# Environment variables for optimization
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=production
ENV MODEL_NAME=paraphrase-MiniLM-L3-v2

# Expose port
EXPOSE 5001

# Health check with optimized intervals for lightweight model
HEALTHCHECK --interval=30s --timeout=15s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5001/health || exit 1

# Run with optimized Gunicorn for lightweight model
CMD ["gunicorn", "--config", "gunicorn.conf.py", "run:app"] 